import datetime
import logging

import requests
from django.conf import settings
from django.contrib.auth import get_user_model
from django.core.management.base import BaseCommand
from django.db.models import Count
from django.utils import timezone
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)

from main.models import Location, QRCodeScan

User = get_user_model()
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USERNAMES = [
    "Iforce706",
    "subanovsh",
]  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤


class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ QR-–∫–æ–¥–æ–≤"

    def handle(self, *args, **kwargs):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            level=logging.INFO,
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = ApplicationBuilder().token(settings.TELEGRAM_BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("admin", self.admin_command))
        application.add_handler(CommandHandler("allstats", self.all_stats_command))
        application.add_handler(CommandHandler("compare", self.compare_command))
        application.add_handler(CommandHandler("dashboard", self.dashboard_command))

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.button_callback))

        self.stdout.write("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        application.run_polling()

    def is_admin(self, username):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        return username in ADMIN_USERNAMES

    # For the start_command
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã /start."""
        user = update.effective_user
        is_admin = self.is_admin(user.username)

        print(
            f"[DEBUG] start_command called by user: {user.username} (first_name: {user.first_name})"
        )
        print(f"[DEBUG] User admin status: {is_admin}")

        # Rest of the function remains the same

    # For the help_command
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã /help."""
        user = update.effective_user
        is_admin = self.is_admin(user.username)

        print(
            f"[DEBUG] help_command called by user: {user.username} (first_name: {user.first_name})"
        )
        print(f"[DEBUG] User admin status: {is_admin}")

        # Rest of the function remains the same

    # For the admin_command
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user = update.effective_user

        print(
            f"[DEBUG] admin_command called by user: {user.username} (first_name: {user.first_name})"
        )
        print(f"[DEBUG] User admin status: {self.is_admin(user.username)}")

        if not self.is_admin(user.username):
            print(
                f"[DEBUG] Access denied for user: {user.username} - not in admin list"
            )
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return

        # Rest of the function remains the same

    # For the stats_command
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É QR-–∫–æ–¥–æ–≤."""
        user = update.effective_user
        print(
            f"[DEBUG] stats_command called by user: {user.username} (first_name: {user.first_name})"
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–Ω–µ–π, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)
        days = 30
        if context.args and context.args[0].isdigit():
            days = int(context.args[0])

        print(f"[DEBUG] Stats requested for last {days} days")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ API
        api_url = f"{settings.SITE_URL}/api/location-stats/?days={days}"
        headers = {"Authorization": f"Token {settings.API_TOKEN}"}

        # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print(f"[DEBUG] Connecting to API URL: {api_url}")
        print(f"[DEBUG] Using API token starting with: {settings.API_TOKEN[:5]}...")
        logger.info(f"Attempting to connect to API at: {api_url}")
        logger.info(f"Using API token: {settings.API_TOKEN[:5]}...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if not settings.SITE_URL or settings.SITE_URL == "http://localhost:8000":
                print(
                    f"[DEBUG] Configuration error: SITE_URL not properly configured: {settings.SITE_URL}"
                )
                logger.error(
                    f"SITE_URL is not properly configured: {settings.SITE_URL}"
                )
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: SITE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return

            if not settings.API_TOKEN or settings.API_TOKEN == "your_api_token_here":
                print(f"[DEBUG] Configuration error: API_TOKEN not properly configured")
                logger.error("API_TOKEN is not properly configured")
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: API_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python manage.py create_api_token admin' –∏ –æ–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª."
                )
                return

            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            print(f"[DEBUG] Sending GET request to API with timeout of 10 seconds")
            response = requests.get(api_url, headers=headers, timeout=10)

            print(f"[DEBUG] API response status code: {response.status_code}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if response.status_code != 200:
                print(
                    f"[DEBUG] API error: Status {response.status_code}, Response body: {response.text}"
                )
                logger.error(
                    f"API returned status code: {response.status_code}, Response: {response.text}"
                )
                await update.message.reply_text(
                    f"–û—à–∏–±–∫–∞ API: –°—Ç–∞—Ç—É—Å {response.status_code}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ API –¥–æ—Å—Ç—É–ø–µ–Ω."
                )
                return

            data = response.json()
            print(
                f"[DEBUG] Successfully parsed API response: {len(data)} location(s) found"
            )

            if not data:
                print(f"[DEBUG] No QR code scan data available")
                await update.message.reply_text(
                    "–î–∞–Ω–Ω—ã–µ –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö QR-–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ QR-–∫–æ–¥–æ–≤ (–ü–æ—Å–ª–µ–¥–Ω–∏–µ {} –¥–Ω–µ–π)\n\n".format(days)

            for location in data:
                print(
                    f"[DEBUG] Location: {location['name']} - Total scans: {location['total_scans']}, Recent scans: {location['recent_scans']}"
                )
                message += f"*{location['name']}*\n"
                message += f"–í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {location['total_scans']}\n"
                message += f"–ù–µ–¥–∞–≤–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ({days} –¥–Ω–µ–π): {location['recent_scans']}\n\n"

            print(f"[DEBUG] Sending stats message with {len(data)} locations")
            await update.message.reply_text(message, parse_mode="Markdown")
        except requests.exceptions.ConnectionError as e:
            print(f"[DEBUG] Connection error: {str(e)}")
            logger.error(f"Connection error: {str(e)}")
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä Django –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω."
            )
        except requests.exceptions.Timeout as e:
            print(f"[DEBUG] Timeout error: {str(e)}")
            logger.error(f"Timeout error: {str(e)}")
            await update.message.reply_text(
                "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API. –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω."
            )
        except Exception as e:
            print(f"[DEBUG] Unexpected error: {str(e)}")
            print(f"[DEBUG] Error type: {type(e).__name__}")
            import traceback

            print(f"[DEBUG] Traceback: {traceback.format_exc()}")
            logger.error(f"Error fetching statistics: {str(e)}")
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    # For the all_stats_command
    async def all_stats_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ª–æ–∫–∞—Ü–∏—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        user = update.effective_user
        print(
            f"[DEBUG] all_stats_command called by user: {user.username} (first_name: {user.first_name})"
        )
        print(f"[DEBUG] User admin status: {self.is_admin(user.username)}")

        if not self.is_admin(user.username):
            print(
                f"[DEBUG] Access denied for user: {user.username} - not in admin list"
            )
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–Ω–µ–π, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)
        days = 30
        if context.args and context.args[0].isdigit():
            days = int(context.args[0])

        print(f"[DEBUG] All stats requested for last {days} days")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∞—Ç
        today = timezone.now().date()
        start_date = today - datetime.timedelta(days=days)
        print(f"[DEBUG] Date range: from {start_date} to {today}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏
            locations = Location.objects.all()
            print(f"[DEBUG] Found {locations.count()} locations in database")

            if not locations.exists():
                print(f"[DEBUG] No locations found in database")
                await update.message.reply_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–π.")
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ –≤—Å–µ–º –ª–æ–∫–∞—Ü–∏—è–º
            total_scans = QRCodeScan.objects.count()
            recent_scans = QRCodeScan.objects.filter(
                timestamp__date__gte=start_date
            ).count()

            print(f"[DEBUG] Total scans across all locations: {total_scans}")
            print(f"[DEBUG] Recent scans (last {days} days): {recent_scans}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ QR-–∫–æ–¥–æ–≤ - –í—Å–µ –ª–æ–∫–∞—Ü–∏–∏ (–ü–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π)*\n\n"
            )
            message += f"*–í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ –≤—Å–µ–º –ª–æ–∫–∞—Ü–∏—è–º: {total_scans}*\n"
            message += (
                f"*–ù–µ–¥–∞–≤–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ü–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π): {recent_scans}*\n\n"
            )
            message += "*–†–∞–∑–±–∏–≤–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º:*\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏
            for location in locations:
                location_total = location.scans.count()
                location_recent = location.scans.filter(
                    timestamp__date__gte=start_date
                ).count()

                percentage = 0
                if total_scans > 0:
                    percentage = (location_total / total_scans) * 100

                print(
                    f"[DEBUG] Location: {location.name} - Total: {location_total}, Recent: {location_recent}, Percentage: {percentage:.1f}%"
                )

                message += f"*{location.name}*\n"
                message += f"–í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {location_total}\n"
                message += f"–ù–µ–¥–∞–≤–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ({days} –¥–Ω–µ–π): {location_recent}\n"

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
                if total_scans > 0:
                    message += f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞: {percentage:.1f}%\n"

                message += "\n"

            print(
                f"[DEBUG] Sending all stats message with {locations.count()} locations"
            )
            await update.message.reply_text(message, parse_mode="Markdown")
        except Exception as e:
            print(f"[DEBUG] Unexpected error in all_stats_command: {str(e)}")
            print(f"[DEBUG] Error type: {type(e).__name__}")
            import traceback

            print(f"[DEBUG] Traceback: {traceback.format_exc()}")
            logger.error(f"Error fetching all statistics: {str(e)}")
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    # For the compare_command
    async def compare_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        user = update.effective_user
        print(
            f"[DEBUG] compare_command called by user: {user.username} (first_name: {user.first_name})"
        )
        print(f"[DEBUG] User admin status: {self.is_admin(user.username)}")

        if not self.is_admin(user.username):
            print(
                f"[DEBUG] Access denied for user: {user.username} - not in admin list"
            )
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏
            locations = Location.objects.all()
            print(f"[DEBUG] Found {locations.count()} locations in database")

            if not locations.exists() or locations.count() < 2:
                print(
                    f"[DEBUG] Insufficient locations for comparison: {locations.count()} found, need at least 2"
                )
                await update.message.reply_text(
                    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º –¥–≤–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."
                )
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –≤—Ä–µ–º–µ–Ω–∏
            today = timezone.now().date()
            yesterday = today - datetime.timedelta(days=1)
            last_week = today - datetime.timedelta(days=7)
            last_month = today - datetime.timedelta(days=30)

            print(f"[DEBUG] Date ranges for comparison:")
            print(f"[DEBUG] Today: {today}")
            print(f"[DEBUG] Yesterday: {yesterday}")
            print(f"[DEBUG] Last week from: {last_week}")
            print(f"[DEBUG] Last month from: {last_month}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "üìä *–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π*\n\n"

            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            message += "*–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
            print(f"[DEBUG] Calculating scans for today")
            for location in locations:
                today_count = location.scans.filter(timestamp__date=today).count()
                print(
                    f"[DEBUG] Location: {location.name} - Today's scans: {today_count}"
                )
                message += f"{location.name}: {today_count}\n"

            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ –≤—á–µ—Ä–∞
            message += "\n*–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ –≤—á–µ—Ä–∞:*\n"
            print(f"[DEBUG] Calculating scans for yesterday")
            for location in locations:
                yesterday_count = location.scans.filter(
                    timestamp__date=yesterday
                ).count()
                print(
                    f"[DEBUG] Location: {location.name} - Yesterday's scans: {yesterday_count}"
                )
                message += f"{location.name}: {yesterday_count}\n"

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            message += "\n*–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:*\n"
            print(f"[DEBUG] Calculating scans for last 7 days")
            for location in locations:
                week_count = location.scans.filter(
                    timestamp__date__gte=last_week
                ).count()
                print(
                    f"[DEBUG] Location: {location.name} - Last 7 days scans: {week_count}"
                )
                message += f"{location.name}: {week_count}\n"

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            message += "\n*–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:*\n"
            print(f"[DEBUG] Calculating scans for last 30 days")
            for location in locations:
                month_count = location.scans.filter(
                    timestamp__date__gte=last_month
                ).count()
                print(
                    f"[DEBUG] Location: {location.name} - Last 30 days scans: {month_count}"
                )
                message += f"{location.name}: {month_count}\n"

            # –í—Å–µ –≤—Ä–µ–º—è
            message += "\n*–í—Å–µ –≤—Ä–µ–º—è:*\n"
            print(f"[DEBUG] Calculating all-time scans")
            for location in locations:
                total_count = location.scans.count()
                print(
                    f"[DEBUG] Location: {location.name} - All time scans: {total_count}"
                )
                message += f"{location.name}: {total_count}\n"

            print(
                f"[DEBUG] Sending comparison message with {locations.count()} locations"
            )
            await update.message.reply_text(message, parse_mode="Markdown")
        except Exception as e:
            print(f"[DEBUG] Unexpected error in compare_command: {str(e)}")
            print(f"[DEBUG] Error type: {type(e).__name__}")
            import traceback

            print(f"[DEBUG] Traceback: {traceback.format_exc()}")
            logger.error(f"Error comparing locations: {str(e)}")
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    # For the dashboard_command
    async def dashboard_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        user = update.effective_user
        print(
            f"[DEBUG] dashboard_command called by user: {user.username} (first_name: {user.first_name})"
        )
        print(f"[DEBUG] User admin status: {self.is_admin(user.username)}")

        if not self.is_admin(user.username):
            print(
                f"[DEBUG] Access denied for user: {user.username} - not in admin list"
            )
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            return

        try:
            print(f"[DEBUG] Creating dashboard inline keyboard")
            # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
            keyboard = [
                [
                    InlineKeyboardButton(
                        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="stats_today"
                    ),
                    InlineKeyboardButton(
                        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞", callback_data="stats_yesterday"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="stats_7days"
                    ),
                    InlineKeyboardButton(
                        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data="stats_30days"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="stats_alltime"
                    ),
                    InlineKeyboardButton(
                        "–°—Ä–∞–≤–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏", callback_data="compare_locations"
                    ),
                ],
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)
            print(f"[DEBUG] Inline keyboard created with 6 buttons in 3 rows")

            print(f"[DEBUG] Sending dashboard message")
            await update.message.reply_text(
                "üìä *–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ QR-–∫–æ–¥–æ–≤*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
                reply_markup=reply_markup,
                parse_mode="Markdown",
            )
        except Exception as e:
            print(f"[DEBUG] Unexpected error in dashboard_command: {str(e)}")
            print(f"[DEBUG] Error type: {type(e).__name__}")
            import traceback

            print(f"[DEBUG] Traceback: {traceback.format_exc()}")
            logger.error(f"Error displaying dashboard: {str(e)}")
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    # For the button_callback
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–µ –≤—ã–∑–æ–≤—ã –∫–Ω–æ–ø–æ–∫ —Å –ø–∞–Ω–µ–ª–∏"""
        query = update.callback_query
        await query.answer()

        callback_data = query.data
        user = update.effective_user

        print(f"[DEBUG] Button callback received from user: {user.username}")
        print(f"[DEBUG] Callback data: {callback_data}")
        print(f"[DEBUG] User admin status: {self.is_admin(user.username)}")

        if not self.is_admin(user.username):
            print(
                f"[DEBUG] Access denied for user: {user.username} - not in admin list"
            )
            await query.edit_message_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
            )
            return

        try:
            if callback_data == "stats_today":
                print(f"[DEBUG] Processing stats_today callback")
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                today = timezone.now().date()
                locations = Location.objects.all()
                print(f"[DEBUG] Today's date: {today}")
                print(f"[DEBUG] Found {locations.count()} locations")

                message = "\ud83d\udcca *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n"
                total_today = QRCodeScan.objects.filter(timestamp__date=today).count()
                print(f"[DEBUG] Total scans today across all locations: {total_today}")
                message += f"*–í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {total_today}*\n\n"

                for location in locations:
                    today_count = location.scans.filter(timestamp__date=today).count()
                    print(
                        f"[DEBUG] Location: {location.name} - Today's scans: {today_count}"
                    )
                    message += f"*{location.name}*: {today_count} —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard = [
                    [
                        InlineKeyboardButton(
                            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏", callback_data="back_to_dashboard"
                        )
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                print(f"[DEBUG] Created back button for return to dashboard")

                print(f"[DEBUG] Sending today's stats message")
                await query.edit_message_text(
                    message, reply_markup=reply_markup, parse_mode="Markdown"
                )

            elif callback_data == "stats_yesterday":
                print(f"[DEBUG] Processing stats_yesterday callback")
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—á–µ—Ä–∞
                today = timezone.now().date()
                yesterday = today - datetime.timedelta(days=1)
                locations = Location.objects.all()
                print(f"[DEBUG] Yesterday's date: {yesterday}")
                print(f"[DEBUG] Found {locations.count()} locations")

                message = "\ud83d\udcca *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞*\n\n"
                total_yesterday = QRCodeScan.objects.filter(
                    timestamp__date=yesterday
                ).count()
                print(
                    f"[DEBUG] Total scans yesterday across all locations: {total_yesterday}"
                )
                message += f"*–í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤—á–µ—Ä–∞: {total_yesterday}*\n\n"

                for location in locations:
                    yesterday_count = location.scans.filter(
                        timestamp__date=yesterday
                    ).count()
                    print(
                        f"[DEBUG] Location: {location.name} - Yesterday's scans: {yesterday_count}"
                    )
                    message += f"*{location.name}*: {yesterday_count} —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard = [
                    [
                        InlineKeyboardButton(
                            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏", callback_data="back_to_dashboard"
                        )
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                print(f"[DEBUG] Created back button for return to dashboard")

                print(f"[DEBUG] Sending yesterday's stats message")
                await query.edit_message_text(
                    message, reply_markup=reply_markup, parse_mode="Markdown"
                )

            # Similar debug prints should be added to the remaining elif blocks

            elif callback_data == "stats_7days":
                print(f"[DEBUG] Processing stats_7days callback")
                # Debug the rest of this branch...

            elif callback_data == "stats_30days":
                print(f"[DEBUG] Processing stats_30days callback")
                # Debug the rest of this branch...

            elif callback_data == "stats_alltime":
                print(f"[DEBUG] Processing stats_alltime callback")
                # Debug the rest of this branch...

            elif callback_data == "compare_locations":
                print(f"[DEBUG] Processing compare_locations callback")
                # Debug the rest of this branch...

            elif callback_data == "back_to_dashboard":
                print(f"[DEBUG] Processing back_to_dashboard callback")
                # Debug the rest of this branch...

        except Exception as e:
            print(f"[DEBUG] Unexpected error in button_callback: {str(e)}")
            print(f"[DEBUG] Error type: {type(e).__name__}")
            print(f"[DEBUG] Callback data that caused error: {callback_data}")
            import traceback

            print(f"[DEBUG] Traceback: {traceback.format_exc()}")
            logger.error(f"Error handling button callback: {str(e)}")
            await query.edit_message_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    # For the handle method (initialization)
    def handle(self, *args, **kwargs):
        print(f"[DEBUG] Starting Telegram bot...")
        print(f"[DEBUG] SITE_URL: {settings.SITE_URL}")
        print(
            f"[DEBUG] API_TOKEN (first 5 chars): {settings.API_TOKEN[:5] if settings.API_TOKEN else 'Not set'}"
        )
        print(
            f"[DEBUG] TELEGRAM_BOT_TOKEN (first 5 chars): {settings.TELEGRAM_BOT_TOKEN[:5] if settings.TELEGRAM_BOT_TOKEN else 'Not set'}"
        )
        print(f"[DEBUG] ADMIN_USERNAMES: {ADMIN_USERNAMES}")

        # Rest of the method remains the same

    # Utility method to log database stats
    def log_database_stats(self):
        """Utility method to log database statistics for debugging"""
        try:
            location_count = Location.objects.count()
            scan_count = QRCodeScan.objects.count()
            user_count = User.objects.count()

            print(f"[DEBUG] Database statistics:")
            print(f"[DEBUG] - Locations: {location_count}")
            print(f"[DEBUG] - QR Code Scans: {scan_count}")
            print(f"[DEBUG] - Users: {user_count}")

            # Get most active locations
            locations_with_counts = Location.objects.annotate(
                scan_count=Count("scans")
            ).order_by("-scan_count")
            print(f"[DEBUG] Top locations by scan count:")
            for loc in locations_with_counts[:5]:  # Show top 5
                print(f"[DEBUG] - {loc.name}: {loc.scan_count} scans")

            # Get recent activity
            today = timezone.now().date()
            yesterday = today - datetime.timedelta(days=1)
            today_scans = QRCodeScan.objects.filter(timestamp__date=today).count()
            yesterday_scans = QRCodeScan.objects.filter(
                timestamp__date=yesterday
            ).count()

            print(f"[DEBUG] Recent activity:")
            print(f"[DEBUG] - Today ({today}): {today_scans} scans")
            print(f"[DEBUG] - Yesterday ({yesterday}): {yesterday_scans} scans")

        except Exception as e:
            print(f"[DEBUG] Error logging database stats: {str(e)}")
