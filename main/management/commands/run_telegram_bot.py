import datetime
import logging
import traceback

import requests
from django.conf import settings
from django.contrib.auth import get_user_model
from django.core.management.base import BaseCommand
from django.db.models import Count
from django.utils import timezone
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)

from main.models import Location, QRCodeScan

# Import debugging utilities
from .debug_log import get_log_file_path, log_api_request, log_function_call

User = get_user_model()
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USERNAMES = [
    "Iforce706",
    "subanovsh",
]  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤


class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ QR-–∫–æ–¥–æ–≤"

    def handle(self, *args, **kwargs):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            level=logging.INFO,
        )

        # Display log file location
        log_path = get_log_file_path()
        self.stdout.write(f"Debug logs will be written to: {log_path}")

        # Log key configuration settings
        logger.info(f"SITE_URL: {settings.SITE_URL}")
        logger.info(
            f"TELEGRAM_BOT_TOKEN configured: {'Yes' if settings.TELEGRAM_BOT_TOKEN else 'No'}"
        )
        logger.info(f"API_TOKEN configured: {'Yes' if settings.API_TOKEN else 'No'}")

        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            application = (
                ApplicationBuilder().token(settings.TELEGRAM_BOT_TOKEN).build()
            )

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
            application.add_handler(CommandHandler("start", self.start_command))
            application.add_handler(CommandHandler("stats", self.stats_command))
            application.add_handler(CommandHandler("help", self.help_command))
            application.add_handler(CommandHandler("admin", self.admin_command))
            application.add_handler(CommandHandler("allstats", self.all_stats_command))
            application.add_handler(CommandHandler("compare", self.compare_command))
            application.add_handler(CommandHandler("dashboard", self.dashboard_command))

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            application.add_handler(CallbackQueryHandler(self.button_callback))

            # Add error handler
            application.add_error_handler(self.error_handler)

            self.stdout.write("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            application.run_polling()
        except Exception as e:
            logger.error(f"Error initializing bot: {str(e)}")
            logger.error(traceback.format_exc())
            self.stdout.write(self.style.ERROR(f"Failed to start bot: {str(e)}"))

    async def error_handler(self, update, context):
        """Global error handler for all update types"""
        # Log the error
        logger.error(f"Exception while handling an update: {context.error}")
        logger.error(traceback.format_exc())

        # Log update info if available
        if update:
            if update.effective_user:
                user_id = update.effective_user.id
                username = update.effective_user.username
                logger.error(f"Update from user {user_id} (@{username})")

            if update.effective_message:
                logger.error(f"Message text: {update.effective_message.text}")

        # Notify user
        try:
            if update and update.effective_message:
                await update.effective_message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω."
                )
        except Exception as e:
            logger.error(f"Error sending error message: {str(e)}")

    def is_admin(self, username):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        return username in ADMIN_USERNAMES

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã /start."""
        user = update.effective_user
        is_admin = self.is_admin(user.username)

        welcome_message = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ QR-–∫–æ–¥–æ–≤ GOS Furniture, {user.first_name}!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π QR-–∫–æ–¥–æ–≤\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
        )

        if is_admin:
            welcome_message += "\n\nüîê *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n"
            welcome_message += "/admin - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            welcome_message += "/allstats - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º –ª–æ–∫–∞—Ü–∏—è–º\n"
            welcome_message += "/compare - –°—Ä–∞–≤–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏\n"
            welcome_message += "/dashboard - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"

        await update.message.reply_text(welcome_message, parse_mode="Markdown")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã /help."""
        user = update.effective_user
        is_admin = self.is_admin(user.username)

        help_message = (
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/stats - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π QR-–∫–æ–¥–æ–≤\n"
            "/stats 7 - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )

        if is_admin:
            help_message += "\n\nüîê *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n"
            help_message += "/admin - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            help_message += "/allstats - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º –ª–æ–∫–∞—Ü–∏—è–º\n"
            help_message += (
                "/allstats 7 - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
            )
            help_message += "/compare - –°—Ä–∞–≤–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏\n"
            help_message += "/dashboard - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"

        await update.message.reply_text(help_message, parse_mode="Markdown")

    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user = update.effective_user

        if not self.is_admin(user.username):
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return

        admin_message = (
            "üîê *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "/allstats - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º –ª–æ–∫–∞—Ü–∏—è–º\n"
            "/allstats 7 - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
            "/compare - –°—Ä–∞–≤–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏\n"
            "/dashboard - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏"
        )

        await update.message.reply_text(admin_message, parse_mode="Markdown")

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É QR-–∫–æ–¥–æ–≤."""
        user = update.effective_user
        log_function_call("stats_command", user.id, user.username)

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–Ω–µ–π, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)
        days = 30
        if context.args and context.args[0].isdigit():
            days = int(context.args[0])
            log_function_call("stats_command", user.id, user.username, f"days={days}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ API
        api_url = f"{settings.SITE_URL}/api/location-stats/?days={days}"
        headers = {"Authorization": f"Token {settings.API_TOKEN}"}

        # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info(f"Attempting to connect to API at: {api_url}")
        logger.info(f"Using API token: {settings.API_TOKEN[:5]}...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if not settings.SITE_URL or settings.SITE_URL == "http://localhost:8000":
                logger.error(
                    f"SITE_URL is not properly configured: {settings.SITE_URL}"
                )
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: SITE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return

            if not settings.API_TOKEN or settings.API_TOKEN == "your_api_token_here":
                logger.error("API_TOKEN is not properly configured")
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: API_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python manage.py create_api_token admin' –∏ –æ–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª."
                )
                return

            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            try:
                response = requests.get(api_url, headers=headers, timeout=10)
                log_api_request(api_url, response.status_code, response.text[:200])
            except requests.exceptions.RequestException as req_err:
                log_api_request(api_url, error=str(req_err))
                raise

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if response.status_code != 200:
                logger.error(
                    f"API returned status code: {response.status_code}, Response: {response.text}"
                )
                await update.message.reply_text(
                    f"–û—à–∏–±–∫–∞ API: –°—Ç–∞—Ç—É—Å {response.status_code}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ API –¥–æ—Å—Ç—É–ø–µ–Ω."
                )
                return

            data = response.json()

            if not data:
                await update.message.reply_text(
                    "–î–∞–Ω–Ω—ã–µ –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö QR-–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ QR-–∫–æ–¥–æ–≤ (–ü–æ—Å–ª–µ–¥–Ω–∏–µ {} –¥–Ω–µ–π)\n\n".format(days)

            for location in data:
                message += f"*{location['name']}*\n"
                message += f"–í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {location['total_scans']}\n"
                message += f"–ù–µ–¥–∞–≤–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ({days} –¥–Ω–µ–π): {location['recent_scans']}\n\n"

            await update.message.reply_text(message, parse_mode="Markdown")
        except requests.exceptions.ConnectionError as e:
            logger.error(f"Connection error: {str(e)}")
            logger.error(traceback.format_exc())
            log_function_call(
                "stats_command",
                user.id,
                user.username,
                error=f"Connection error: {str(e)}",
            )
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä Django –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω."
            )
        except requests.exceptions.Timeout as e:
            logger.error(f"Timeout error: {str(e)}")
            logger.error(traceback.format_exc())
            log_function_call(
                "stats_command",
                user.id,
                user.username,
                error=f"Timeout error: {str(e)}",
            )
            await update.message.reply_text(
                "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API. –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω."
            )
        except Exception as e:
            logger.error(f"Error fetching statistics: {str(e)}")
            logger.error(traceback.format_exc())
            log_function_call(
                "stats_command",
                user.id,
                user.username,
                error=f"General error: {str(e)}",
            )
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def all_stats_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ª–æ–∫–∞—Ü–∏—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        user = update.effective_user
        logger.info(
            f"all_stats_command called by user: {user.username} (ID: {user.id})"
        )

        # Check admin permissions
        if not self.is_admin(user.username):
            logger.warning(
                f"User {user.username} attempted to access admin command without permission"
            )
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            return

        # Get days parameter
        days = 30
        try:
            if context.args and context.args[0].isdigit():
                days = int(context.args[0])
                logger.info(f"Using custom days parameter: {days}")
        except Exception as e:
            logger.error(f"Error parsing days parameter: {str(e)}")
            # Continue with default value

        # Calculate date ranges
        try:
            today = timezone.now().date()
            start_date = today - datetime.timedelta(days=days)
            logger.info(f"Date range: {start_date} to {today}")
        except Exception as e:
            logger.error(f"Error calculating date range: {str(e)}")
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        # Send typing action to show the bot is processing
        await update.message.chat.send_action(action="typing")

        try:
            # Get all locations with safer query approach
            try:
                # First check if we can connect to the database at all
                from django.db import connection

                cursor = connection.cursor()
                cursor.execute("SELECT 1")
                cursor.fetchone()
                cursor.close()
                logger.info("Database connection test successful")

                # Use a simpler query first to test if Location model is accessible
                location_count = Location.objects.count()
                logger.info(f"Location count: {location_count}")

                if location_count == 0:
                    logger.warning("No locations found in database")
                    await update.message.reply_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–π.")
                    return

                # Now fetch the locations
                locations = list(Location.objects.all())
                logger.info(f"Successfully fetched {len(locations)} locations")

            except Exception as db_err:
                logger.error(f"Database error fetching locations: {str(db_err)}")
                logger.error(traceback.format_exc())
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏—è—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return

            # Calculate total scans
            try:
                total_scans = QRCodeScan.objects.count()
                recent_scans = QRCodeScan.objects.filter(
                    timestamp__date__gte=start_date
                ).count()
                logger.info(f"Total scans: {total_scans}, Recent scans: {recent_scans}")
            except Exception as db_err:
                logger.error(f"Database error counting scans: {str(db_err)}")
                logger.error(traceback.format_exc())
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return

            # Format message
            try:
                message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ QR-–∫–æ–¥–æ–≤ - –í—Å–µ –ª–æ–∫–∞—Ü–∏–∏ (–ü–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π)*\n\n"
                message += f"*–í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ –≤—Å–µ–º –ª–æ–∫–∞—Ü–∏—è–º: {total_scans}*\n"
                message += f"*–ù–µ–¥–∞–≤–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ü–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π): {recent_scans}*\n\n"
                message += "*–†–∞–∑–±–∏–≤–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º:*\n\n"

                # Check if message is getting too long
                if (
                    len(message) > 3000
                ):  # Telegram has a 4096 char limit, leaving room for location data
                    logger.warning(
                        "Message is getting too long, might exceed Telegram limits"
                    )
            except Exception as fmt_err:
                logger.error(f"Error formatting message header: {str(fmt_err)}")
                logger.error(traceback.format_exc())
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return

            # Add statistics for each location
            location_errors = 0
            for location in locations:
                try:
                    location_name = location.name
                    logger.info(f"Processing location: {location_name}")

                    location_total = location.scans.count()
                    location_recent = location.scans.filter(
                        timestamp__date__gte=start_date
                    ).count()

                    logger.info(
                        f"Location {location_name}: Total={location_total}, Recent={location_recent}"
                    )

                    message += f"*{location_name}*\n"
                    message += f"–í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {location_total}\n"
                    message += (
                        f"–ù–µ–¥–∞–≤–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ({days} –¥–Ω–µ–π): {location_recent}\n"
                    )

                    # Calculate percentage
                    if total_scans > 0:
                        percentage = (location_total / total_scans) * 100
                        message += f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞: {percentage:.1f}%\n"

                    message += "\n"

                    # Check if message is getting too long
                    if len(message) > 3800:  # Getting close to Telegram's limit
                        logger.warning("Message exceeds safe length, truncating")
                        message += (
                            "*–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–µ –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏*\n"
                        )
                        break

                except Exception as loc_err:
                    logger.error(
                        f"Error processing location {getattr(location, 'name', 'unknown')}: {str(loc_err)}"
                    )
                    location_errors += 1
                    continue

            if location_errors > 0:
                logger.warning(f"Encountered errors with {location_errors} locations")
                message += f"\n*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {location_errors} –ª–æ–∫–∞—Ü–∏–π*\n"

            # Send the message
            logger.info(f"Sending all_stats message, length: {len(message)} characters")
            try:
                await update.message.reply_text(message, parse_mode="Markdown")
                logger.info("All stats message sent successfully")
            except Exception as send_err:
                logger.error(f"Error sending message: {str(send_err)}")
                logger.error(traceback.format_exc())

                # Try sending without markdown if that might be the issue
                if "can't parse entities" in str(send_err).lower():
                    logger.info("Attempting to send message without Markdown")
                    await update.message.reply_text(
                        "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
                    )
                    # Strip markdown characters
                    plain_message = message.replace("*", "").replace("_", "")
                    await update.message.reply_text(plain_message)
                else:
                    await update.message.reply_text(
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )

        except Exception as e:
            logger.error(f"Unexpected error in all_stats_command: {str(e)}")
            logger.error(traceback.format_exc())
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def compare_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        user = update.effective_user

        if not self.is_admin(user.username):
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏
            locations = Location.objects.all()

            if not locations.exists() or locations.count() < 2:
                await update.message.reply_text(
                    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º –¥–≤–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."
                )
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –≤—Ä–µ–º–µ–Ω–∏
            today = timezone.now().date()
            yesterday = today - datetime.timedelta(days=1)
            last_week = today - datetime.timedelta(days=7)
            last_month = today - datetime.timedelta(days=30)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "üìä *–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π*\n\n"

            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            message += "*–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
            for location in locations:
                today_count = location.scans.filter(timestamp__date=today).count()
                message += f"{location.name}: {today_count}\n"

            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ –≤—á–µ—Ä–∞
            message += "\n*–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ –≤—á–µ—Ä–∞:*\n"
            for location in locations:
                yesterday_count = location.scans.filter(
                    timestamp__date=yesterday
                ).count()
                message += f"{location.name}: {yesterday_count}\n"

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            message += "\n*–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:*\n"
            for location in locations:
                week_count = location.scans.filter(
                    timestamp__date__gte=last_week
                ).count()
                message += f"{location.name}: {week_count}\n"

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            message += "\n*–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:*\n"
            for location in locations:
                month_count = location.scans.filter(
                    timestamp__date__gte=last_month
                ).count()
                message += f"{location.name}: {month_count}\n"

            # –í—Å–µ –≤—Ä–µ–º—è
            message += "\n*–í—Å–µ –≤—Ä–µ–º—è:*\n"
            for location in locations:
                total_count = location.scans.count()
                message += f"{location.name}: {total_count}\n"

            await update.message.reply_text(message, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"Error comparing locations: {str(e)}")
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def dashboard_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        user = update.effective_user

        if not self.is_admin(user.username):
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
            keyboard = [
                [
                    InlineKeyboardButton(
                        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="stats_today"
                    ),
                    InlineKeyboardButton(
                        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞", callback_data="stats_yesterday"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="stats_7days"
                    ),
                    InlineKeyboardButton(
                        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data="stats_30days"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="stats_alltime"
                    ),
                    InlineKeyboardButton(
                        "–°—Ä–∞–≤–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏", callback_data="compare_locations"
                    ),
                ],
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                "üìä *–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ QR-–∫–æ–¥–æ–≤*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
                reply_markup=reply_markup,
                parse_mode="Markdown",
            )
        except Exception as e:
            logger.error(f"Error displaying dashboard: {str(e)}")
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–µ –≤—ã–∑–æ–≤—ã –∫–Ω–æ–ø–æ–∫ —Å –ø–∞–Ω–µ–ª–∏"""
        if not update or not update.callback_query:
            logger.error(
                "Button callback received invalid update without callback_query"
            )
            return

        query = update.callback_query
        user = update.effective_user

        # Safely get callback data
        try:
            callback_data = query.data
            logger.info(
                f"Processing callback: {callback_data} from user {user.username}"
            )
        except Exception as e:
            logger.error(f"Error getting callback data: {str(e)}")
            return

        # Answer the callback query to prevent the "loading" state in Telegram
        try:
            await query.answer()
        except Exception as e:
            logger.error(f"Error answering callback query: {str(e)}")
            # Continue execution even if answering fails

        # Check admin permissions
        if not self.is_admin(user.username):
            try:
                await query.edit_message_text(
                    "‚õî –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
                )
            except Exception as e:
                logger.error(f"Error editing message for non-admin: {str(e)}")
            return

        try:
            logger.info(f"Processing callback action: {callback_data}")

            if callback_data == "stats_today":
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                    today = timezone.now().date()
                    logger.info(f"Fetching statistics for today: {today}")

                    # Safely query the database
                    try:
                        locations = Location.objects.all()
                        logger.info(f"Found {locations.count()} locations")
                    except Exception as db_err:
                        logger.error(
                            f"Database error fetching locations: {str(db_err)}"
                        )
                        await query.edit_message_text(
                            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏—è—Ö."
                        )
                        return

                    message = "\ud83d\udcca *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n"

                    # Safely get total scans
                    try:
                        total_today = QRCodeScan.objects.filter(
                            timestamp__date=today
                        ).count()
                        message += f"*–í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {total_today}*\n\n"
                    except Exception as db_err:
                        logger.error(f"Database error counting scans: {str(db_err)}")
                        total_today = 0
                        message += (
                            "*–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π*\n\n"
                        )

                    # Process each location
                    for location in locations:
                        try:
                            today_count = location.scans.filter(
                                timestamp__date=today
                            ).count()
                            message += (
                                f"*{location.name}*: {today_count} —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n"
                            )
                        except Exception as loc_err:
                            logger.error(
                                f"Error counting scans for location {location.name}: {str(loc_err)}"
                            )
                            message += f"*{location.name}*: –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞\n"

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                    keyboard = [
                        [
                            InlineKeyboardButton(
                                "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏", callback_data="back_to_dashboard"
                            )
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    # Send the message
                    logger.info("Sending today's stats message")
                    await query.edit_message_text(
                        message, reply_markup=reply_markup, parse_mode="Markdown"
                    )
                    logger.info("Today's stats message sent successfully")

                except Exception as e:
                    logger.error(f"Error processing stats_today: {str(e)}")
                    logger.error(traceback.format_exc())
                    await query.edit_message_text(
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )

            elif callback_data == "stats_yesterday":
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—á–µ—Ä–∞
                today = timezone.now().date()
                yesterday = today - datetime.timedelta(days=1)
                locations = Location.objects.all()

                message = "\ud83d\udcca *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞*\n\n"
                total_yesterday = QRCodeScan.objects.filter(
                    timestamp__date=yesterday
                ).count()
                message += f"*–í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤—á–µ—Ä–∞: {total_yesterday}*\n\n"

                for location in locations:
                    yesterday_count = location.scans.filter(
                        timestamp__date=yesterday
                    ).count()
                    message += f"*{location.name}*: {yesterday_count} —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard = [
                    [
                        InlineKeyboardButton(
                            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏", callback_data="back_to_dashboard"
                        )
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    message, reply_markup=reply_markup, parse_mode="Markdown"
                )

            elif callback_data == "stats_7days":
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
                today = timezone.now().date()
                last_week = today - datetime.timedelta(days=7)
                locations = Location.objects.all()

                message = "\ud83d\udcca *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π*\n\n"
                total_week = QRCodeScan.objects.filter(
                    timestamp__date__gte=last_week
                ).count()
                message += f"*–í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π): {total_week}*\n\n"

                for location in locations:
                    week_count = location.scans.filter(
                        timestamp__date__gte=last_week
                    ).count()
                    message += f"*{location.name}*: {week_count} —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard = [
                    [
                        InlineKeyboardButton(
                            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏", callback_data="back_to_dashboard"
                        )
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    message, reply_markup=reply_markup, parse_mode="Markdown"
                )

            elif callback_data == "stats_30days":
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
                today = timezone.now().date()
                last_month = today - datetime.timedelta(days=30)
                locations = Location.objects.all()

                message = "\ud83d\udcca *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π*\n\n"
                total_month = QRCodeScan.objects.filter(
                    timestamp__date__gte=last_month
                ).count()
                message += (
                    f"*–í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π): {total_month}*\n\n"
                )

                for location in locations:
                    month_count = location.scans.filter(
                        timestamp__date__gte=last_month
                    ).count()
                    message += f"*{location.name}*: {month_count} —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard = [
                    [
                        InlineKeyboardButton(
                            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏", callback_data="back_to_dashboard"
                        )
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    message, reply_markup=reply_markup, parse_mode="Markdown"
                )

            elif callback_data == "stats_alltime":
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
                locations = Location.objects.all()

                message = "\ud83d\udcca *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è*\n\n"
                total_all = QRCodeScan.objects.count()
                message += f"*–í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è): {total_all}*\n\n"

                for location in locations:
                    all_count = location.scans.count()
                    percentage = 0
                    if total_all > 0:
                        percentage = (all_count / total_all) * 100
                    message += f"*{location.name}*: {all_count} —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π ({percentage:.1f}%)\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard = [
                    [
                        InlineKeyboardButton(
                            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏", callback_data="back_to_dashboard"
                        )
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    message, reply_markup=reply_markup, parse_mode="Markdown"
                )

            elif callback_data == "compare_locations":
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏
                locations = Location.objects.all()

                if not locations.exists() or locations.count() < 2:
                    await query.edit_message_text(
                        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º –¥–≤–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."
                    )
                    return

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –≤—Ä–µ–º–µ–Ω–∏
                today = timezone.now().date()
                yesterday = today - datetime.timedelta(days=1)
                last_week = today - datetime.timedelta(days=7)
                last_month = today - datetime.timedelta(days=30)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = "üìä *–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π*\n\n"

                # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                message += "*–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
                for location in locations:
                    today_count = location.scans.filter(timestamp__date=today).count()
                    message += f"{location.name}: {today_count}\n"

                # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ –≤—á–µ—Ä–∞
                message += "\n*–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ –≤—á–µ—Ä–∞:*\n"
                for location in locations:
                    yesterday_count = location.scans.filter(
                        timestamp__date=yesterday
                    ).count()
                    message += f"{location.name}: {yesterday_count}\n"

                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
                message += "\n*–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:*\n"
                for location in locations:
                    week_count = location.scans.filter(
                        timestamp__date__gte=last_week
                    ).count()
                    message += f"{location.name}: {week_count}\n"

                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
                message += "\n*–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:*\n"
                for location in locations:
                    month_count = location.scans.filter(
                        timestamp__date__gte=last_month
                    ).count()
                    message += f"{location.name}: {month_count}\n"

                # –í—Å–µ –≤—Ä–µ–º—è
                message += "\n*–í—Å–µ –≤—Ä–µ–º—è:*\n"
                for location in locations:
                    total_count = location.scans.count()
                    message += f"{location.name}: {total_count}\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard = [
                    [
                        InlineKeyboardButton(
                            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏", callback_data="back_to_dashboard"
                        )
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    message, reply_markup=reply_markup, parse_mode="Markdown"
                )

            elif callback_data == "back_to_dashboard":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–Ω–µ–ª–∏
                keyboard = [
                    [
                        InlineKeyboardButton(
                            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="stats_today"
                        ),
                        InlineKeyboardButton(
                            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞", callback_data="stats_yesterday"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="stats_7days"
                        ),
                        InlineKeyboardButton(
                            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data="stats_30days"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="stats_alltime"
                        ),
                        InlineKeyboardButton(
                            "–°—Ä–∞–≤–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏", callback_data="compare_locations"
                        ),
                    ],
                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    "üìä *–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ QR-–∫–æ–¥–æ–≤*\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
                    reply_markup=reply_markup,
                    parse_mode="Markdown",
                )

        except Exception as e:
            logger.error(f"Error handling button callback: {str(e)}")
            logger.error(traceback.format_exc())
            log_function_call(
                "button_callback",
                user.id,
                user.username,
                error=f"Error handling callback: {str(e)}",
            )
            try:
                await query.edit_message_text(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except Exception as edit_err:
                logger.error(f"Failed to send error message: {str(edit_err)}")
